#!/usr/bin/env python

import signal
import os
import time
import json
import sys
import yaml
import logging

from core import Plumbago
from apscheduler.scheduler import Scheduler
from datetime import datetime, timedelta

__author__ = 'uzix & dembar'

log = logging.getLogger()


class colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    GRAY = '\033[90m'
    YELLOW = '\033[93m'
    PURPLE = '\033[95m'
    DEF = '\033[0m'

    def disable(self):
        self.GREEN = ''
        self.RED = ''
        self.GRAY = ''
        self.YELLOW = ''
        self.DEF = ''


def createDaemon():
    try:
        pid = os.fork()
    except OSError, e:
        raise Exception, "%s [%d]" % (e.strerror, e.errno)

    if pid == 0:
        os.setsid()
        try:
            pid = os.fork()
        except OSError, e:
            raise Exception, "%s [%d]" % (e.strerror, e.errno)

        if pid != 0:
            os._exit(0)
    else:
        os._exit(0)

    return


def getPlumbagoPid(pidFile):
    try:
        with open(pidFile, 'r') as _pidFile:
            return int(_pidFile.readline())
    except IOError:
        print "Could not open Plumbago pidfile", pidFile
        exit(1)


def definePidFile(config):
    try:
        return config['config']['pidfile']
    except KeyError:
        return '%s/plumbago.pid' % os.path.dirname(os.path.realpath(sys.argv[0]))


def defineLogFile(config):
    try:
        return config['config']['logging']['file']
    except KeyError:
        return '%s/plumbago.log' % os.path.dirname(os.path.realpath(sys.argv[0]))


def getAlertStatus(alertName):
    time.sleep(1)
    try:
        with open('/tmp/plumbago.status', 'r') as statusfile:
            alerts = json.load(statusfile)
    except IOError as ex:
        log.error('[Plumbago] Failed to load alerts status. Error: %s', ex)
        return

    if alertName.lower() == 'all':
        for alert in alerts:
            if alert['status'] == 0:
                print '%s: %sOK%s' % (alert['name'], colors.GREEN, colors.DEF)
            elif alert['status'] == 1:
                print '%s: %sERROR%s' % (alert['name'], colors.RED, colors.DEF)
            elif alert['status'] == 2:
                print '%s: %sDISABLED%s' % (alert['name'], colors.GRAY, colors.DEF)
            elif alert['status'] == 3:
                print '%s: %sSNOOZED for %s minutes%s' % (alert['name'], colors.PURPLE, alert['snooze'], colors.DEF)
            elif alert['status'] == 4:
                print '%s: %sUNKNOWN%s' % (alert['name'], colors.YELLOW, colors.DEF)

    elif alertName.lower() == 'error':
        for alert in alerts:
            if alert['status'] == 1:
                print '%s: %sERROR%s' % (alert['name'], colors.RED, colors.DEF)

    elif alertName.lower() == 'disabled':
        for alert in alerts:
            if alert['status'] == 2:
                print '%s: %sDISABLED%s' % (alert['name'], colors.GRAY, colors.DEF)

    elif alertName.lower == 'snoozed':
        for alert in alerts:
            if alert['status'] == 3:
                print '%s: %sSNOOZED for %s minutes%s' % (alert['name'], colors.PURPLE, alert['snooze'], colors.DEF)

    elif alertName.lower == 'unknown':
        for alert in alerts:
            if alert['status'] == 4:
                print '%s: %sUNKNOWN%s' % (alert['name'], colors.YELLOW, colors.DEF)
    else:
        found = False
        for alert in alerts:
            if alert['name'].lower() == alertName.lower():
                found = True
                print "\nName:", alert['name']
                print "Target:", alert['target']

                try:
                    print "Enabled:", alert['enabled']
                except KeyError:
                    print "Enabled?: True"

                try:
                    print "Action:", alert['action']
                except KeyError:
                    print "Action?: None"

                try:
                    print "Reverse?:", alert['reverse']
                except KeyError:
                    print "Reverse?: False"

                print "Value:", str(alert['value'])
                print "Threshold:", str(alert['threshold'])
                print "Cycles:", str(alert['cycles'])

                if alert['status'] == 0:
                    print 'Status: %sOK%s' % (colors.GREEN, colors.DEF)
                elif alert['status'] == 1:
                    print 'Status: %sERROR%s' % (colors.RED, colors.DEF)
                elif alert['status'] == 2:
                    print 'Status: %sDISABLED%s' % (colors.GRAY, colors.DEF)
                elif alert['status'] == 3:
                    print 'Status: %sSNOOZED for %s minutes%s' % (colors.PURPLE, alert['snooze'], colors.DEF)
                elif alert['status'] == 4:
                    print 'Status: %sUNKNOWN%s\n' % (colors.YELLOW, colors.DEF)

                try:
                    print "Comment:", alert['comment']
                except KeyError:
                    print "Comment: None"

                print
                break
        if not found:
            print "\nNo alert exists with that name. Try -t all to see the complete list of alerts\n"
    os.remove('/tmp/plumbago.status')


def binaryChange(options, configFile):
    config = loadConfig(configFile)

    pending = True
    while pending:
        if options.enable:
            alertName = options.enable
            action = 'enabled'
            new_status = True
            options.enable = False
            if not (options.disable or options.reverse):
                pending = False

        elif options.disable:
            alertName = options.disable
            action = 'enabled'
            new_status = False
            options.disable = False
            if not (options.enable or options.reverse):
                pending = False

        elif options.reverse:
            alertName = options.reverse
            action = 'reverse'
            try:
                if config['alerts'][alertName]['reverse']:
                    new_status = False
                else:
                    new_status = True
            except KeyError:
                new_status = True
            options.reverse = False
            if not (options.enable or options.disable):
                pending = False

        if alertName.lower() == 'all':
            for alert in config['alerts']:
                if options.reverse:
                    try:
                        if config['alerts'][alert]['reverse']:
                            new_status = False
                        else:
                            new_status = True
                    except KeyError:
                        new_status = True

                try:
                    config['alerts'][alert][action] = new_status
                except KeyError:
                    continue
        else:
            try:
                config['alerts'][alertName][action] = new_status
            except KeyError:
                print "\nNo alert exists with that name. Try -t all to see the complete list of alerts\n"
                return

    saveConfig(configFile, config)


def paramChange(options, configFile):
    config = loadConfig(configFile)

    pending = True
    while pending:
        if options.agent:
            alertName = options.agent[0]
            field = 'agents'
            new_value = options.agent[1].split(',')
            options.agent = False
            if not (options.threshold
                    or options.target
                    or options.diff
                    or options.cycles
                    or options.action
                    or options.comment
                    or options.snooze):
                pending = False

        elif options.threshold:
            alertName = options.threshold[0]
            field = 'threshold'
            new_value = float(options.threshold[1])
            options.threshold = False
            if not (options.agent
                    or options.target
                    or options.diff
                    or options.cycles
                    or options.action
                    or options.comment
                    or options.snooze):
                pending = False

        elif options.target:
            alertName = options.target[0]
            field = 'target'
            new_value = options.target[1]
            options.target = False
            if not (options.agent
                    or options.threshold
                    or options.diff
                    or options.cycles
                    or options.action
                    or options.comment
                    or options.snooze):
                pending = False

        elif options.diff:
            alertName = options.diff[0]
            field = 'diff'
            new_value = int(options.diff[1])
            options.diff = False
            if not (options.agent
                    or options.threshold
                    or options.target
                    or options.cycles
                    or options.action
                    or options.comment
                    or options.snooze):
                pending = False

        elif options.cycles:
            alertName = options.cycles[0]
            field = 'error_cycles'
            new_value = int(options.cycles[1])
            options.cycles = False
            if not (options.agent
                    or options.threshold
                    or options.target
                    or options.diff
                    or options.action
                    or options.comment
                    or options.snooze):
                pending = False

        elif options.action:
            alertName = options.action[0]
            field = 'action'
            if str(options.action[1].lower()) == 'false' or str(options.action[1].lower()) == 'none':
                new_value = False
            else:
                new_value = options.action[1]
            options.action = False
            if not (options.agent
                    or options.threshold
                    or options.target
                    or options.diff
                    or options.cycles
                    or options.comment
                    or options.snooze):
                pending = False

        elif options.comment:
            alertName = options.comment[0]
            field = 'comment'
            new_value = options.comment[1]
            options.comment = False
            if not (options.agent
                    or options.threshold
                    or options.target
                    or options.diff
                    or options.cycles
                    or options.action
                    or options.snooze):
                pending = False

        elif alertName.lower() == 'all' and not (options.threshold or options.target):
            for alert in config['alerts']:
                try:
                    config['alerts'][alert][field] = new_value
                except KeyError:
                    continue

        try:
            config['alerts'][alertName][field] = new_value
        except KeyError:
            print "\nNo alert exists with that name. Try -t all to see the complete list of alerts\n"
            return

    saveConfig(configFile, config)


def startServer(config, configFileOpt):
    print "Starting Plumbago server..."
    createDaemon()

    with open(config['config']['pidfile'], 'w') as pidfile:
        pidfile.write(str(os.getpid()))

    server = Plumbago(config)
    log.info('[Plumbago] Plumbago server started')

    def handler(signum, frame):
        if signum == signal.SIGUSR1:
            try:
                with open(configFileOpt, 'r') as configFile:
                    config = yaml.load(configFile)
            except IOError as ex:
                print "Could not load configuration file", configFileOpt
                log.error('[Plumbago] Could not load configuration file %s. Error: %s', configFileOpt, ex)
                return
            server.configure(config)
        elif signum == signal.SIGUSR2:
            server.dump_status()
        elif signum == signal.SIGTERM:
            log.info('[Plumbago] Received SIGTERM gracefully stopping in next runloop')
            server._running = False

    signal.signal(signal.SIGTERM, handler)
    signal.signal(signal.SIGUSR1, handler)
    signal.signal(signal.SIGUSR2, handler)

    server.run()

    os.remove(config['config']['pidfile'])
    return


def reloadConfig(pidFile):
    try:
        os.kill(getPlumbagoPid(pidFile), signal.SIGUSR1)
        log.debug('[Plumbago] Sent USR1 signal')
    except OSError:
        exit(1)


def terminateServer(pidFile):
    try:
        os.kill(getPlumbagoPid(pidFile), signal.SIGTERM)
        print "Killing Plumbago server..."
        log.debug('[Plumbago] Sent TERM signal')
    except OSError:
        print "Plumbago server not running!"
        exit(1)


def serverRunning(config):
    if os.path.exists(config['config']['pidfile']):
        try:
            os.kill(getPlumbagoPid(config['config']['pidfile']), 0)
            return True
        except OSError:
            print "Removing bogus pid file..."
            os.remove(config['config']['pidfile'])
            log.debug('[Plumbago] Removed bogus pid file')
            return False


def snooze(alert, configFile):
    config = loadConfig(configFile)

    try:
        config['alerts'][alert[0]]['snooze'] = alert[1]
    except KeyError:
        log.error("No alert exists with that name. Try -t all to see the complete list of alerts")
        return

    saveConfig(configFile, config)

    new_value = int(alert[1])
    if new_value > 0:
        date = datetime.now() + timedelta(minutes=new_value)
        scheduler = Scheduler(standalone=True)
        scheduler.add_date_job(snoozeClear, date=date, args=(alert[0], configFile))
        log.info('[Plumbago] Snoozed %s for %s minutes' % (alert[0], alert[1]))
        createDaemon()
        scheduler.start()
        return


def snoozeClear(alert, configFile):
    config = loadConfig(configFile)

    try:
        config['alerts'][alert]['snooze'] = False
    except KeyError:
        log.error("No alert exists with that name. Try -t all to see the complete list of alerts")
        return

    saveConfig(configFile, config)
    log.info("[Plumbago] Alert %s unsnoozed", alert)


def loadConfig(configFilePath):
    try:
        with open(str(configFilePath), 'r') as configFile:
            config = yaml.load(configFile)
        return config
    except (IOError, yaml.YAMLError) as ex:
        print 'Could not load configuration file %s. Error: %s' % (configFilePath, ex)
        exit()


def saveConfig(configFilePath, config):
    try:
        pidFile = config['config']['pidfile']
        with open(str(configFilePath), 'w') as newConfig:
            yaml.dump(config, newConfig)
        config['config']['pidfile'] = pidFile
        if serverRunning(config):
            reloadConfig(config['config']['pidfile'])
    except (IOError, yaml.YAMLError) as ex:
        log.error('[Plumbago] Could not save new config. Error: %s', ex)


def main():
    from argparse import ArgumentParser

    parser = ArgumentParser(prog='plumbago')
    server_group = parser.add_argument_group('Server')
    file_group = parser.add_argument_group('Files', 'Define where core files are or go')
    alert_group = parser.add_argument_group('Alerts', 'See and modify alerts')

    server_group.add_argument('--server', dest='server', action='store_true', default=False,
                              help='Run Plumbago Server')
    server_group.add_argument('--reload', dest='reload', action='store_true', default=False,
                              help="Reload Plumbago configuration")
    server_group.add_argument('--kill', dest='kill', action='store_true', default=False,
                              help='Kill Plumbago server')
    server_group.add_argument('--web', dest='web', action='store_true', default=False,
                              help='Start web server')

    file_group.add_argument('--config', dest='config',
                            help='Plumbago config file', nargs=1, metavar='CONFIG_FILE')

    alert_group.add_argument('-a', '--agent', dest='agent', nargs=2, metavar=('ALERT_NAME', 'AGENT'),
                             help='Change notification agent for an alert [alert_name|all|error]')
    alert_group.add_argument('-c', '--cycles', dest='cycles', nargs=2, metavar=('ALERT_NAME', 'INT'),
                             help='Modify alert cycles before alerting [alert_name|all]')
    alert_group.add_argument('-d', '--disable', dest='disable', metavar='ALERT_NAME',
                             help='Disable alert [alert_name|all]')
    alert_group.add_argument('-e', '--enable', dest='enable', metavar='ALERT_NAME',
                             help='Enable alert [alert_name|all]')
    alert_group.add_argument('-f', '--diff', dest='diff', nargs=2, metavar=('ALERT_NAME', 'SECONDS'),
                             help='Modify time between alerts [alert_name|all]')
    alert_group.add_argument('-l', '--threshold', dest='threshold', nargs=2, metavar=('ALERT_NAME', 'THRESHOLD'),
                             help='Modify alert threshold')
    alert_group.add_argument('-m', '--comment', dest='comment', nargs=2, metavar=('ALERT_NAME', 'COMMENT'),
                             help='Modify alert comment')
    alert_group.add_argument('-r', '--reverse', dest='reverse', metavar='ALERT_NAME',
                             help='Reverse alert check [alert_name|error]')
    alert_group.add_argument('-s', '--status', dest='status', metavar='ALERT_NAME',
                             help='Show alerts statuses [alert_name|all|error|disabled|unknown]')
    alert_group.add_argument('-t', '--target', dest='target', nargs=2, metavar=('ALERT_NAME', 'TARGET'),
                             help='Modify alert target')
    alert_group.add_argument('-x', '--action', dest='action', nargs=2, metavar=('ALERT_NAME', 'ACTION'),
                             help='Modify alert action')
    alert_group.add_argument('-z', '--snooze', dest='snooze', nargs=2, metavar=('ALERT_NAME', 'TIME'),
                             help='Snooze alert by TIME factor')

    options = parser.parse_args()

    if not options.config:
        configFile = '%s/config.yaml' % os.path.dirname(os.path.realpath(sys.argv[0]))
    else:
        configFile = options.config[0]

    config = loadConfig(configFile)

    config['config']['pidfile'] = definePidFile(config)

    config['config']['logging']['file'] = defineLogFile(config)

    handler = logging.FileHandler(config['config']['logging']['file'])
    formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s", "%Y-%m-%d %H:%M:%S")
    handler.setFormatter(formatter)
    log.addHandler(handler)
    if config['config']['logging']['debug']:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)

    if options.server:
        if not serverRunning(config):
            startServer(config, configFile)
        else:
            print "Plumbago server already running!"

    elif (options.enable
          or options.disable
          or options.reverse
          ):
        binaryChange(options, configFile)

    elif (options.agent
          or options.threshold
          or options.target
          or options.diff
          or options.cycles
          or options.comment
          or options.action
          ):
        paramChange(options, configFile)

    elif options.snooze:
        if serverRunning(config):
            snooze(options.snooze, configFile)
        else:
            print "Plumbago server not running!"

    elif options.reload:
        if serverRunning(config):
            pidFile = config['config']['pidfile']
            logFile = config['config']['logging']['file']
            reloadConfig(config['config']['pidfile'])
            config['config']['pidfile'] = pidFile
            config['config']['logging']['file'] = logFile
            print "Reloading Plumbago configuration..."
        else:
            print "Plumbago server not running!"

    elif options.status:
        if serverRunning(config):
            os.kill(getPlumbagoPid(config['config']['pidfile']), signal.SIGUSR2)
            getAlertStatus(options.status)
        else:
            print "Plumbago server not running!"

    elif options.kill:
        if serverRunning(config):
            terminateServer(config['config']['pidfile'])
        else:
            print "Plumbago server not running!"

    else:
        print "\nNothing to do..."
        parser.print_usage()
        return


if __name__ == "__main__":
    main()