#!/usr/bin/env python

import logging
import signal
import os
import time
import json
import sys
import yaml

from core import Plumbago


__author__ = 'uzix'

log = logging.getLogger()


class colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    GRAY = '\033[90m'
    YELLOW = '\033[93m'
    DEF = '\033[0m'

    def disable(self):
        self.GREEN = ''
        self.RED = ''
        self.GRAY = ''
        self.YELLOW = ''
        self.DEF = ''


def createDaemon():
    try:
        pid = os.fork()
    except OSError, e:
        raise Exception, "%s [%d]" % (e.strerror, e.errno)

    if pid == 0:
        os.setsid()
        try:
            pid = os.fork()
        except OSError, e:
            raise Exception, "%s [%d]" % (e.strerror, e.errno)

        if pid != 0:
            os._exit(0)
    else:
        os._exit(0)

    return


def getPlumbagoPid(pidFile):
    try:
        with open(pidFile, 'r') as _pidFile:
            return int(_pidFile.readline())
    except:
        print "Could not open Plumbago pidfile", pidFile
        exit(1)


def getAlertStatus(alertName):
    time.sleep(1)
    try:
        with open('/tmp/plumbago.status', 'r') as statusfile:
            alerts = json.load(statusfile)
    except Exception as ex:
        log.error('Failed to load alerts status. Error: %s', ex)
        return

    if alertName == 'all':
        for alert in alerts:
            if alert['status'] == 0:
                print '%s: %sOK%s' % (alert['name'], colors.GREEN, colors.DEF)
            elif alert['status'] == 1:
                print '%s: %sERROR%s' % (alert['name'], colors.RED, colors.DEF)
            elif alert['status'] == 2:
                print '%s: %sDISABLED%s' % (alert['name'], colors.GRAY, colors.DEF)
            elif alert['status'] == 3:
                print '%s: %sUNKNOWN%s' % (alert['name'], colors.YELLOW, colors.DEF)

    elif alertName == 'error':
        for alert in alerts:
            if alert['status'] == 1:
                print '%s: %sERROR%s' % (alert['name'], colors.RED, colors.DEF)

    elif alertName == 'disabled':
        for alert in alerts:
            if alert['status'] == 2:
                print '%s: %sDISABLED%s' % (alert['name'], colors.GRAY, colors.DEF)

    elif alertName == 'unknown':
        for alert in alerts:
            if alert['status'] == 3:
                print '%s: %sUNKNOWN%s' % (alert['name'], colors.YELLOW, colors.DEF)
    else:
        found = False
        for alert in alerts:
            if alert['name'] == alertName:
                found = True
                print "\nName:", alert['name']
                print "Target:", alert['target']

                try:
                    print "Enabled:", alert['enabled']
                except:
                    print "Enabled?: True"

                try:
                    print "Action:", alert['action']
                except:
                    print "Action?: None"

                try:
                    print "Reverse?:", alert['reverse']
                except:
                    print "Reverse?: False"

                print "Value:", str(alert['value'])
                print "Threshold:", str(alert['threshold'])
                print "Cycles:", str(alert['cycles'])

                if alert['status'] == 0:
                    print 'Status: %sOK%s' % (colors.GREEN, colors.DEF)
                elif alert['status'] == 1:
                    print 'Status: %sERROR%s' % (colors.RED, colors.DEF)
                elif alert['status'] == 2:
                    print 'Status: %sDISABLED%s' % (colors.GRAY, colors.DEF)
                elif alert['status'] == 3:
                    print 'Status: %sUNKNOWN%s\n' % (colors.YELLOW, colors.DEF)

                try:
                    print "Comment:", alert['comment']
                except:
                    print "Comment: None"

                print
                break
        if not found:
            print "\nNo alert exists with that name. Try -t all to see the complete list of alerts\n"
    os.remove('/tmp/plumbago.status')


def enableAlert(alertName, config, configFile):
    pidFile = config['config']['pidfile']
    logFile = config['config']['logging']['file']

    try:
        with open(configFile, 'r') as oldConfig:
            config = yaml.load(oldConfig)
    except:
        print 'Could not open config file', configFile
        return

    if alertName == 'all':
        for alert in config['alerts']:
            try:
                if not config['alerts'][alert]['enabled']:
                    config['alerts'][alert]['enabled'] = True
            except:
                continue
    else:
        try:
            config['alerts'][alertName]
        except:
            print "\nNo alert exists with that name. Try -t all to see the complete list of alerts\n"
            return

        try:
            if config['alerts'][alertName]['enabled']:
                print "Alert is already enabled"
                return
            else:
                config['alerts'][alertName]['enabled'] = True
        except:
            print "Alert is already enabled"
            return
    try:
        with open(configFile, 'w') as newConfig:
            yaml.dump(config, newConfig)
        log.info('Enabled', alertName)
        config['config']['pidfile'] = pidFile
        config['config']['logging']['file'] = logFile
        reloadConfig(config['config']['pidfile'])
    except Exception as ex:
        log.error('Could not save new config. Error: %s', ex)


def disableAlert(alertName, config, configFile):
    pidFile = config['config']['pidfile']
    logFile = config['config']['logging']['file']

    try:
        with open(configFile, 'r') as oldConfig:
            config = yaml.load(oldConfig)
    except:
        print 'Could not open config file', configFile
        return

    if alertName == 'all':
        for alert in config['alerts']:
            config['alerts'][alert]['enabled'] = False
    else:
        try:
            config['alerts'][alertName]['enabled'] = False
        except:
            print "\nNo alert exists with that name. Try -t all to see the complete list of alerts\n"
            return
    try:
        with open(configFile, 'w') as newConfig:
            yaml.dump(config, newConfig)
        log.info('Disabled', alertName)
        config['config']['pidfile'] = pidFile
        config['config']['logging']['file'] = logFile
        reloadConfig(config['config']['pidfile'])
    except Exception as ex:
        print 'Failed to write new configuration'
        log.error('Could not save new config. Error: %s', ex)


def reloadConfig(pidFile):
    try:
        os.kill(getPlumbagoPid(pidFile), signal.SIGUSR1)
        print "Reloading Plumbago configuration..."
        log.debug('Sent USR1 SIGNAL')
    except:
        print "Plumbago server not running!"
        exit(1)


def terminateServer(pidFile):
    try:
        os.kill(getPlumbagoPid(pidFile), signal.SIGTERM)
        print "Killing Plumbago server..."
        log.debug('Sent TERM signal')
    except:
        print "Plumbago server not running!"
        exit(1)


def startServer(config, configFileOpt):
    print "Starting server..."
    createDaemon()

    with open(config['config']['pidfile'], 'w') as pidfile:
        pidfile.write(str(os.getpid()))

    server = Plumbago(config)
    log.info('Plumbago server started')

    def handler(signum, frame):
        if signum == signal.SIGUSR1:
            try:
                with open(configFileOpt, 'r') as configFile:
                    config = yaml.load(configFile)
            except Exception as ex:
                print "Could not load configuration file", configFileOpt
                log.error('Could not load configuration file %s. Error: %s', configFileOpt, ex)
                return
            server.configure(config)
        elif signum == signal.SIGUSR2:
            server.dump_status()
        elif signum == signal.SIGTERM:
            log.info('Received SIGTERM gracefully stopping in next runloop')
            server._running = False

    signal.signal(signal.SIGTERM, handler)
    signal.signal(signal.SIGUSR1, handler)
    signal.signal(signal.SIGUSR2, handler)

    server.run()
    os.remove(config['config']['pidfile'])
    return


def definePidFile(config):
    try:
        return config['config']['pidfile']
    except:
        return '%s/plumbago.pid' % sys.path[0]


def defineLogFile(config):
    try:
        return config['config']['logging']['file']
    except:
        return '%s/plumbago.log' % sys.path[0]

def serverRunning(config):
    if os.path.exists(config['config']['pidfile']):
        try:
            os.kill(getPlumbagoPid(config['config']['pidfile']), 0)
            return True
        except:
            print "Removing bogus pid file..."
            os.remove(config['config']['pidfile'])
            log.debug('Removed bogus pid file')
            return False

def main():
    from argparse import ArgumentParser

    parser = ArgumentParser(prog='Plumbago')
    parser.add_argument("-p", "--pid-file", dest="pid", help="Plumbago pid file", metavar="PID_FILE")
    parser.add_argument("-c", "--config-file", dest="config", default='%s/config.yaml' % sys.path[1],
                      help="Plumbago config file",
                      metavar="CONFIG_FILE")
    parser.add_argument("-l", "--log-file", dest="log", help="Plumbago log file", metavar="LOG_FILE")
    parser.add_argument("-s", "--server", dest="server", action="store_true", default=False, help="Run Plumbago Server")
    parser.add_argument("-d", "--disable", dest="disable", help="Disable alert [alert_name|all]",
                      metavar="ALERT_NAME")
    parser.add_argument("-e", "--enable", dest="enable", help="Enable alert [alert_name|all]",
                      metavar="ALERT_NAME")
    parser.add_argument("-k", "--kill", dest="kill", action="store_true", default=False, help="Kill Plumbago server")
    parser.add_argument("-r", "--reload", dest="reload", action="store_true", default=False,
                      help="Reload Plumbago configuration")
    parser.add_argument("-t", "--status", dest="status",
                      help="Show alerts statuses [alert_name|all|error|disabled|unknown]", metavar="ALERT_NAME")
    options = parser.parse_args()

    if not options.reload and not options.status and not options.kill and not options.enable and not options.disable and not options.server:
        print "\nNothing to do..."
        parser.print_usage()
        return

    try:
        with open(options.config, 'r') as configFile:
            config = yaml.load(configFile)
    except Exception as ex:
        print sys.path
        print "Could not load configuration file", options.config
        log.error('Could not load configuration file %s. Error: %s', options.config, ex)
        return
    log.debug('Config file is:', options.config)

    if not options.pid:
        config['config']['pidfile'] = definePidFile(config)
    else:
        config['config']['pidfile'] = options.pid
    log.debug('Pid File is:', config['config']['pidfile'])

    if not options.log:
        config['config']['logging']['file'] = defineLogFile(config)
    else:
        config['config']['logging']['file'] = options.log
    log.debug('Log File is:', config['config']['logging']['file'])

    if options.server:
        if not serverRunning(config):
            options.reload = False
            options.status = False
            options.kill = False
            options.enable = False
            options.disable = False
            startServer(config, options.config)
        else:
            print "Plumbago server already running!"

    if serverRunning(config):
        if options.kill:
            options.reload = False
            options.status = False
            options.enable = False
            options.disable = False
            terminateServer(config['config']['pidfile'])

        if options.reload:
            pidFile = config['config']['pidfile']
            logFile = config['config']['logging']['file']
            reloadConfig(config['config']['pidfile'])
            config['config']['pidfile'] = pidFile
            config['config']['logging']['file'] = logFile

        if options.status:
            os.kill(getPlumbagoPid(config['config']['pidfile']), signal.SIGUSR2)
            getAlertStatus(options.status)

        if options.enable:
            enableAlert(options.enable, config, options.config)

        if options.disable:
            disableAlert(options.disable, config, options.config)

    elif not options.server:
        print "Plumbago server not running!"


if __name__ == "__main__":
    main()